// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package graphql

import (
	"bytes"
	"fmt"
	"io"
	"strconv"
)

type CredentialData interface {
	IsCredentialData()
}

type Pageable interface {
	IsPageable()
	GetPageInfo() *PageInfo
	GetTotalCount() int
}

type Auth struct {
	CredentialForDevice  CredentialData `json:"credentialForDevice,omitempty"`
	CredentialForService *string        `json:"credentialForService,omitempty"`
	AccessStrategy       *string        `json:"accessStrategy,omitempty"`
}

type AuthInput struct {
	CredentialForDevice  *CredentialDataInput `json:"credentialForDevice,omitempty"`
	CredentialForService *string              `json:"credentialForService,omitempty"`
	AccessStrategy       *string              `json:"accessStrategy,omitempty"`
}

type BasicCredentialData struct {
	Username string `json:"username"`
	Password string `json:"password"`
}

func (BasicCredentialData) IsCredentialData() {}

type BasicCredentialDataInput struct {
	Username string `json:"username"`
	Password string `json:"password"`
}

type BearerTokenCredentialData struct {
	Token string `json:"token"`
}

func (BearerTokenCredentialData) IsCredentialData() {}

type CertificateOAuthCredentialData struct {
	ClientID    string `json:"clientId"`
	Certificate string `json:"certificate"`
	URL         string `json:"url"`
}

func (CertificateOAuthCredentialData) IsCredentialData() {}

type CertificateOAuthCredentialDataInput struct {
	ClientID    string `json:"clientId"`
	Certificate string `json:"certificate"`
	URL         string `json:"url"`
}

type CredentialDataInput struct {
	Basic            *BasicCredentialDataInput            `json:"basic,omitempty"`
	Oauth            *OAuthCredentialDataInput            `json:"oauth,omitempty"`
	CertificateOAuth *CertificateOAuthCredentialDataInput `json:"certificateOAuth,omitempty"`
	BearerToken      *TokenCredentialDataInput            `json:"bearerToken,omitempty"`
}

type DataModel struct {
	ID          string     `json:"id"`
	Name        string     `json:"name"`
	Description string     `json:"description"`
	Schema      JSON       `json:"schema"`
	CreatedAt   *Timestamp `json:"createdAt,omitempty"`
	UpdatedAt   *Timestamp `json:"updatedAt,omitempty"`
}

type DataModelInput struct {
	Name        string `json:"name"`
	Description string `json:"description"`
	Schema      JSON   `json:"schema"`
}

type DeviceInput struct {
	Name        string       `json:"name"`
	Description *string      `json:"description,omitempty"`
	Status      DeviceStatus `json:"status"`
	Host        *HostInput   `json:"host,omitempty"`
	Auth        *AuthInput   `json:"auth,omitempty"`
}

type DevicePage struct {
	Data       []*Device `json:"data"`
	PageInfo   *PageInfo `json:"pageInfo"`
	TotalCount int       `json:"totalCount"`
}

func (DevicePage) IsPageable()                 {}
func (this DevicePage) GetPageInfo() *PageInfo { return this.PageInfo }
func (this DevicePage) GetTotalCount() int     { return this.TotalCount }

type Host struct {
	ID              string  `json:"id"`
	URL             string  `json:"url"`
	TurnOnEndpoint  *string `json:"turnOnEndpoint,omitempty"`
	TurnOffEndpoint *string `json:"turnOffEndpoint,omitempty"`
}

type HostInput struct {
	URL             string  `json:"url"`
	TurnOnEndpoint  *string `json:"turnOnEndpoint,omitempty"`
	TurnOffEndpoint *string `json:"turnOffEndpoint,omitempty"`
}

type Mutation struct {
}

type OAuthCredentialData struct {
	ClientID     string `json:"clientId"`
	ClientSecret string `json:"clientSecret"`
	URL          string `json:"url"`
}

func (OAuthCredentialData) IsCredentialData() {}

type OAuthCredentialDataInput struct {
	ClientID     string `json:"clientId"`
	ClientSecret string `json:"clientSecret"`
	URL          string `json:"url"`
}

type PageInfo struct {
	StartCursor string `json:"startCursor"`
	EndCursor   string `json:"endCursor"`
	HasNextPage bool   `json:"hasNextPage"`
}

type Query struct {
}

type TokenCredentialDataInput struct {
	Token string `json:"token"`
}

type Widget struct {
	ID          string       `json:"id"`
	Name        string       `json:"name"`
	Description *string      `json:"description,omitempty"`
	Status      WidgetStatus `json:"status"`
	TenantID    string       `json:"tenantId"`
	Code        string       `json:"code"`
	Workspace   string       `json:"workspace"`
	DeviceIds   []string     `json:"deviceIds,omitempty"`
	CreatedAt   *Timestamp   `json:"createdAt,omitempty"`
	UpdatedAt   *Timestamp   `json:"updatedAt,omitempty"`
}

type WidgetInput struct {
	Name        string       `json:"name"`
	Description *string      `json:"description,omitempty"`
	Status      WidgetStatus `json:"status"`
	Code        string       `json:"code"`
	Workspace   string       `json:"workspace"`
	DeviceIds   []string     `json:"deviceIds,omitempty"`
}

type AggregationType string

const (
	AggregationTypeSum      AggregationType = "SUM"
	AggregationTypeAverage  AggregationType = "AVERAGE"
	AggregationTypeLastWeek AggregationType = "LAST_WEEK"
)

var AllAggregationType = []AggregationType{
	AggregationTypeSum,
	AggregationTypeAverage,
	AggregationTypeLastWeek,
}

func (e AggregationType) IsValid() bool {
	switch e {
	case AggregationTypeSum, AggregationTypeAverage, AggregationTypeLastWeek:
		return true
	}
	return false
}

func (e AggregationType) String() string {
	return string(e)
}

func (e *AggregationType) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AggregationType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AggregationType", str)
	}
	return nil
}

func (e AggregationType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *AggregationType) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e AggregationType) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type DeviceStatus string

const (
	DeviceStatusInitial     DeviceStatus = "INITIAL"
	DeviceStatusActive      DeviceStatus = "ACTIVE"
	DeviceStatusUnreachable DeviceStatus = "UNREACHABLE"
	DeviceStatusError       DeviceStatus = "ERROR"
)

var AllDeviceStatus = []DeviceStatus{
	DeviceStatusInitial,
	DeviceStatusActive,
	DeviceStatusUnreachable,
	DeviceStatusError,
}

func (e DeviceStatus) IsValid() bool {
	switch e {
	case DeviceStatusInitial, DeviceStatusActive, DeviceStatusUnreachable, DeviceStatusError:
		return true
	}
	return false
}

func (e DeviceStatus) String() string {
	return string(e)
}

func (e *DeviceStatus) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DeviceStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DeviceStatus", str)
	}
	return nil
}

func (e DeviceStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *DeviceStatus) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e DeviceStatus) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type OperationType string

const (
	OperationTypeTurnOn               OperationType = "TURN_ON"
	OperationTypeTurnOff              OperationType = "TURN_OFF"
	OperationTypeSendEmail            OperationType = "SEND_EMAIL"
	OperationTypeSendEmailWithContent OperationType = "SEND_EMAIL_WITH_CONTENT"
)

var AllOperationType = []OperationType{
	OperationTypeTurnOn,
	OperationTypeTurnOff,
	OperationTypeSendEmail,
	OperationTypeSendEmailWithContent,
}

func (e OperationType) IsValid() bool {
	switch e {
	case OperationTypeTurnOn, OperationTypeTurnOff, OperationTypeSendEmail, OperationTypeSendEmailWithContent:
		return true
	}
	return false
}

func (e OperationType) String() string {
	return string(e)
}

func (e *OperationType) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OperationType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OperationType", str)
	}
	return nil
}

func (e OperationType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *OperationType) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e OperationType) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type WidgetStatus string

const (
	WidgetStatusInactive WidgetStatus = "INACTIVE"
	WidgetStatusActive   WidgetStatus = "ACTIVE"
)

var AllWidgetStatus = []WidgetStatus{
	WidgetStatusInactive,
	WidgetStatusActive,
}

func (e WidgetStatus) IsValid() bool {
	switch e {
	case WidgetStatusInactive, WidgetStatusActive:
		return true
	}
	return false
}

func (e WidgetStatus) String() string {
	return string(e)
}

func (e *WidgetStatus) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = WidgetStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid WidgetStatus", str)
	}
	return nil
}

func (e WidgetStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *WidgetStatus) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e WidgetStatus) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

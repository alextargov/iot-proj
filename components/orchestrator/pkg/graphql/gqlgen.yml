# Where are all the schema files located? globs are supported eg  src/**/*.graphqls
schema: schema.graphql

# Where should the generated server code go?
exec:
  filename: schema_gen.go
  package: graphql

# Enable Apollo federation support
federation:
  filename: federation.go
  package: graphql

# Where should any generated models go?
model:
  filename: models_gen.go
  package: graphql

# Where should the resolver implementations go?
#resolver:
#  layout: follow-schema
#  dir: internal/graphql
#  package: graphql
#  filename_template: "{name}.resolvers.go"

# Optional: turn on use ` + "`" + `gqlgen:"fieldName"` + "`" + ` tags in your models
# struct_tag: json

# Optional: turn on to use []Thing instead of []*Thing
# omit_slice_element_pointers: false

# Optional: set to speed up generation time by not performing a final validation pass.
# skip_validation: true

# gqlgen will search for any type names in the schema in these go packages
# if they match it will use them, otherwise it will generate them.
#autobind:
#  - "github.com/iot-proj/components/orchestrator/internal/graphql/model"

# This section declares type mapping between the GraphQL and go type systems
#
# The first line in each type will be used as defaults for resolver arguments and
# modelgen, the others will be allowed when binding to fields. Configure them to
# your liking
models:
  Timestamp:
    model: "github.com/iot-proj/components/orchestrator/pkg/graphql.Timestamp"
  ID:
    model:
      - github.com/99designs/gqlgen/graphql.ID
      - github.com/99designs/gqlgen/graphql.Int
      - github.com/99designs/gqlgen/graphql.Int64
      - github.com/99designs/gqlgen/graphql.Int32
  Int:
    model:
      - github.com/99designs/gqlgen/graphql.Int
      - github.com/99designs/gqlgen/graphql.Int64
      - github.com/99designs/gqlgen/graphql.Int32
  Device:
    model: "github.com/iot-proj/components/orchestrator/pkg/graphql.Device"
    fields:
      host:
        resolver: true
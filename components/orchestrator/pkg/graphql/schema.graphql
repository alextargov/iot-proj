scalar PageCursor
scalar Any
scalar Timestamp

union CredentialData = BasicCredentialData | OAuthCredentialData | CertificateOAuthCredentialData | BearerTokenCredentialData

interface Pageable {
    pageInfo: PageInfo!
    totalCount: Int!
}

enum AggregationType {
    SUM
    AVERAGE
    LAST_WEEK
}

enum OperationType {
    TURN_ON
    TURN_OFF
    SEND_EMAIL
    SEND_EMAIL_WITH_CONTENT
}

enum DeviceStatus {
    INITIAL
    ACTIVE
    UNREACHABLE
    ERROR
}

enum WidgetStatus {
    INACTIVE
    ACTIVE
}

type BearerTokenCredentialData {
    token: String!
}

type BasicCredentialData {
    username: String!
    password: String!
}

type OAuthCredentialData {
    clientId: ID!
    clientSecret: String!
    url: String!
}

type CertificateOAuthCredentialData {
    clientId: ID!
    certificate: String!
    url: String!
}

type PageInfo {
    startCursor: PageCursor!
    endCursor: PageCursor!
    hasNextPage: Boolean!
}

type Auth {
    credentialForDevice: CredentialData
    credentialForService: String
    accessStrategy: String
}

type Device {
    id: ID!
    name: String!
    description: String
    status: DeviceStatus!
    tenantId: ID!
    host: Host
    auth: Auth
    createdAt: Timestamp
    updatedAt: Timestamp
}

type Host {
    id: ID!
    url: String!
    turnOnEndpoint: String
    turnOffEndpoint: String
}

type DevicePage implements Pageable {
    data: [Device!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type Widget {
    id: ID!
    name: String!
    description: String
    status: WidgetStatus!
    tenantId: ID!
    code: String!
    workspace: String!
    deviceIds: [String!]
    createdAt: Timestamp
    updatedAt: Timestamp
}

input HostInput {
    url: String!
    turnOnEndpoint: String
    turnOffEndpoint: String
}

input DeviceInput {
    name: String!
    description: String
    status: DeviceStatus!
    host: HostInput
    auth: AuthInput
}

input WidgetInput {
    name: String!
    description: String
    status: WidgetStatus!
    code: String!
    workspace: String!
    deviceIds: [String!]
}


input BasicCredentialDataInput {
    username: String!
    password: String!
}

input TokenCredentialDataInput {
    token: String!
}

input CertificateOAuthCredentialDataInput {
    clientId: ID!
    certificate: String!
    url: String!
}


input OAuthCredentialDataInput {
    clientId: ID!
    clientSecret: String!
    url: String!
}

input CredentialDataInput {
    basic: BasicCredentialDataInput
    oauth: OAuthCredentialDataInput
    certificateOAuth: CertificateOAuthCredentialDataInput
    bearerToken: TokenCredentialDataInput
}

input AuthInput {
    credentialForDevice: CredentialDataInput
    credentialForService: String
    accessStrategy: String
}

type Query {
    devices: [Device]!
    device(id: ID!): Device
    deviceByIdAndAggregation(id: ID!, aggregation: AggregationType!): Device
    widgets: [Widget]!
    widget(id: ID!): Widget
}

type Mutation {
    createDevice(input: DeviceInput!): Device!
    setDeviceOperation(id: ID!, op: OperationType!): Device!
    setOperation(op: OperationType!, data: Any): Boolean!
    deleteDevice(id: String!): String!
    createWidget(input: WidgetInput!): Widget!
    deleteWidget(id: ID!): String!
}